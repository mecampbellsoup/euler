require 'pry'

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

class DivisibleNumber
  attr_reader :value, :factors

  def initialize(index)
    @value = index.to_triangle_value
    @factors = []
    get_factors
  end

  def get_factors
    (1..Math.sqrt(value)).each do |i|
      factors.push(i, value/i) if value % i == 0
    end
  end
end

class Fixnum
  def to_triangle_value
    (1..self).inject(:+)
  end
end

index = 0
divisors_min = 500

start = Time.now

loop do 
  index += 1
  temp = DivisibleNumber.new(index)
  break index if temp.factors.size >= divisors_min
end

puts "The index that generates the first triangle number with #{divisors_min} divisors is #{index}"
puts "That took #{Time.now - start} seconds"